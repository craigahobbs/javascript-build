# -*- makefile-gmake -*-
# Licensed under the MIT License
# https://github.com/craigahobbs/javascript-build/blob/main/LICENSE

# javascript-build - https://github.com/craigahobbs/javascript-build#readme

.DEFAULT_GOAL := help


# Node
NODE_IMAGE ?= node:16-slim
NODE_DOCKER := $(if $(NO_DOCKER),,docker run -i --rm -u `id -u`:`id -g` -v `pwd`:`pwd` -w `pwd` -e HOME=`pwd`/build $(NODE_IMAGE))

# Python
PYTHON_IMAGE ?= python:3
PYTHON_DOCKER := $(if $(NO_DOCKER),,docker run -i --rm -u `id -u`:`id -g` -v `pwd`:`pwd` -w `pwd` $(PYTHON_IMAGE))

# Develpment dependencies
AVA_VERSION ?= 4.0.0-rc.1
C8_VERSION ?= ~7.10
ESLINT_VERSION ?= ~8.3
JSDOC_VERSION ?= ~3.6
JSDOM_VERSION ?= ~18.1

# Ava
AVA_ARGS ?= test/

# C8
C8_ARGS ?= --100 --all --allowExternal --src lib/ --src test/

# ESLint
ESLINT_ARGS ?= lib/ test/

# jsdoc
JSDOC_ARGS ?= -c jsdoc.json -r README.md lib/

# gh-pages source paths
GHPAGES_SRC ?= build/doc/


build/npm.build:
ifeq '$(NO_DOCKER)' ''
	if [ "$$(docker images -q $(NODE_IMAGE))" = "" ]; then docker pull -q $(NODE_IMAGE); fi
endif
	$(NODE_DOCKER) npm install --save-dev \
  ava@'$(AVA_VERSION)' \
  c8@'$(C8_VERSION)' \
  eslint@'$(ESLINT_VERSION)' \
  jsdoc@'$(JSDOC_VERSION)' \
  jsdom@'$(JSDOM_VERSION)'
	mkdir -p $(dir $@)
	touch $@


.PHONY: _help help
help: _help
_help:
	@echo 'usage: make [changelog|clean|commit|cover|doc|gh-pages|lint|publish|superclean|test]'


.PHONY: _clean clean
clean: _clean
_clean:
	rm -rf build node_modules package-lock.json


.PHONY: _superclean superclean
superclean: _superclean
_superclean: clean
ifeq '$(NO_DOCKER)' ''
	-docker rmi -f $(NODE_IMAGE) $(PYTHON_IMAGE)
endif


.PHONY: commit
commit: test lint doc cover


.PHONY: _test test
test: _test
_test: build/npm.build
	$(NODE_DOCKER) npx ava -v$(if $(TEST), --match '$(TEST)')$(if $(AVA_ARGS), $(AVA_ARGS))


.PHONY: _cover cover
cover: _cover
_cover: build/npm.build
	$(NODE_DOCKER) npx c8 -o build/coverage --temp-dir build/tmp -r html -r text$(if $(C8_ARGS), $(C8_ARGS)) \
  npx ava -v$(if $(TEST), --match '$(TEST)')$(if $(AVA_ARGS), $(AVA_ARGS))


.PHONY: _lint lint
lint: _lint
_lint: build/npm.build
	$(NODE_DOCKER) npx eslint -c .eslintrc.cjs -f unix .eslintrc.cjs$(if $(ESLINT_ARGS), $(ESLINT_ARGS))


.PHONY: _doc doc
doc: _doc
_doc: build/npm.build
	$(NODE_DOCKER) npx jsdoc --pedantic -d build/doc/$(if $(JSDOC_ARGS), $(JSDOC_ARGS))


.PHONY: _gh-pages gh-pages
ifneq '$(GHPAGES_SRC)' ''
gh-pages: _gh-pages
_gh-pages: commit
	if [ ! -d ../$(notdir $(CURDIR)).gh-pages ]; then git clone -b gh-pages `git config --get remote.origin.url` ../$(notdir $(CURDIR)).gh-pages; fi
	cd ../$(notdir $(CURDIR)).gh-pages && git pull
	rsync -rv --delete --exclude=.git/ $(GHPAGES_SRC) ../$(notdir $(CURDIR)).gh-pages
	touch ../$(notdir $(CURDIR)).gh-pages/.nojekyll
endif


.PHONY: _publish publish
publish: _publish
_publish: commit
	$(NODE_DOCKER) npm login && $(NODE_DOCKER) npm publish && $(NODE_DOCKER) npm logout


.PHONY: _changelog changelog
changelog: _changelog
_changelog: build/venv-changelog.build
	$(PYTHON_DOCKER) build/venv-changelog/bin/simple-git-changelog

build/venv-changelog.build:
ifeq '$(NO_DOCKER)' ''
	if [ "$$(docker images -q $(PYTHON_IMAGE))" = "" ]; then docker pull -q $(PYTHON_IMAGE); fi
endif
	$(PYTHON_DOCKER) python3 -m venv build/venv-changelog
	$(PYTHON_DOCKER) build/venv-changelog/bin/pip install -U pip setuptools wheel simple-git-changelog
	touch $@
